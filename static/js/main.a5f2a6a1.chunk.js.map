{"version":3,"sources":["resources/img/IMGbackground.webp","components/coverPicture/coverPicture.js","components/button/button.js","components/button/downloadButton.js","resources/theme/global.js","resources/theme/theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CoverPicture","className","src","require","alt","Button","content","url","theme","href","target","rel","DownloadButton","download","GlobalStyles","createGlobalStyle","body","background","header","lightTheme","darkTheme","App","userPreferredTheme","window","matchMedia","matches","useState","bannerSection","toggleTheme","process","createBannerSection","aboutMeSection","myProjectsSection","myResumeSection","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAAAA,EAAOC,QAAU,IAA0B,4C,iICe5BC,MAZf,WACE,OACE,yBAAKC,UAAU,mBACb,yBACEC,IAAKC,EAAQ,IACbC,IAAI,mBACJH,UAAU,iBCSHI,MAhBf,SAAgBC,EAASC,EAAKC,GAC5B,OACE,6BACE,uBAAGC,KAAMF,GACP,yBACEN,UAAU,sBACVS,OAAO,SACPC,IAAI,uBAEHL,M,MCEIM,MAVf,SAAwBN,EAASC,GAC/B,OACE,6BACE,uBAAGE,KAAMF,EAAKM,UAAQ,GACpB,yBAAKZ,UAAU,uBAAuBK,M,qsBCLvC,IAAMQ,EAAeC,YAAH,KASZ,qBAAGP,MAAkBQ,QACV,qBAAGR,MAAkBS,cAGhC,qBAAGT,MAAkBU,UAGrB,qBAAGV,MAAkBU,UAKV,qBAAGV,MAAkBQ,QAQhC,qBAAGR,MAAkBQ,QACV,qBAAGR,MAAkBS,cAE5B,qBAAGT,MAAkBS,cACV,qBAAGT,MAAkBQ,QACP,qBAAGR,MAAkBQ,QCnClDG,EAAa,CACxBF,WAAY,UACZC,OAAQ,UACRF,KAAM,WAGKI,EAAY,CACvBH,WAAY,UACZC,OAAQ,UACRF,KAAM,WC+KOK,MA9Kf,WACE,IAAIC,EAAqB,QAErBC,OAAOC,WAAW,gCAAgCC,UACpDH,EAAqB,QAJV,MAOaI,mBAASJ,GAPtB,mBAONd,EAPM,KAoBPmB,GApBO,KA6Df,SAA6BnB,EAAOoB,GAElC,OACE,yBAAK3B,UAAU,kBACZD,IAID,yBAAKC,UAAU,cACb,4BAAQA,UAAU,SAAlB,sBAGA,yBAAKA,UAAU,YACZI,EACC,WACA,kDACAG,GAEDH,EAAO,SAAU,8BAA+BG,GAChDH,EAAO,QAAS,wCAAyCG,GACzDI,EACC,aACAiB,+CA/DYC,CAAoBtB,IACpCuB,EAwEJ,yBAAK9B,UAAU,cACb,wBAAIA,UAAU,MAAd,YACA,oVAOA,qQAhFE+B,EA2FJ,yBAAK/B,UAAU,cACb,wBAAIA,UAAU,MAAd,aACA,0CACA,qaAOA,uVAMA,+FAGCI,EAAO,oBAAqB,yCAC7B,mDACA,8PAKA,mgBASA,oJAICA,EAAO,oBAAqB,iDAjI3B4B,EAwIJ,yBAAKhC,UAAU,cACb,wBAAIA,UAAU,MAAd,UACA,6GAGCW,EACC,aACAiB,4CAEF,kFAxHN,OACE,yBAAK5B,UAAU,OACb,kBAAC,IAAD,CAAeO,MAAiB,SAAVA,EAAmBW,EAAaC,GACpD,kBAACN,EAAD,MACGa,EACAI,EACAC,EACAC,KCtDWC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a5f2a6a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IMGbackground.4e6cdd38.webp\";","import React from \"react\";\nimport \"./coverPicture.scss\";\n\nfunction CoverPicture() {\n  return (\n    <div className=\"image-container\">\n      <img\n        src={require(\"../../resources/img/IMGbackground.webp\")}\n        alt=\"a cool pic of me\"\n        className=\"coverPhoto\"\n      ></img>\n    </div>\n  );\n}\n\nexport default CoverPicture;\n","import React from \"react\";\n\nfunction Button(content, url, theme) {\n  return (\n    <div>\n      <a href={url}>\n        <div\n          className=\"project-card-button\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          {content}\n        </div>\n      </a>\n    </div>\n  );\n}\n\nexport default Button;\n","import React from \"react\";\nimport \"./button.scss\";\n\nfunction DownloadButton(content, url) {\n  return (\n    <div>\n      <a href={url} download>\n        <div className=\"project-card-button\">{content}</div>\n      </a>\n    </div>\n  );\n}\n\nexport default DownloadButton;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  *,\n  *::after,\n  *::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    align-items: center;\n    color: ${({ theme }) => theme.body};\n    background-color: ${({ theme }) => theme.background};\n  }\n  h1{\n    color: ${({ theme }) => theme.header};\n  }\n  .title {\n    color: ${({ theme }) => theme.header};\n  }\n\n  // Button themes\n  .project-card-button {\n    border: 1px solid ${({ theme }) => theme.body};\n    position: relative;\n    flex-wrap: wrap;\n    padding: 10px;\n    margin-right: 10px;\n    display: inline-block;\n    text-align: center;\n    transition: 0.5s;\n    color: ${({ theme }) => theme.body};\n    background-color: ${({ theme }) => theme.background};\n    &:hover {\n        color: ${({ theme }) => theme.background};\n        background-color: ${({ theme }) => theme.body};\n        box-shadow: inset 300px 0 1px 0 ${({ theme }) => theme.body};\n    }\n  `;\n","// theme.js\nexport const lightTheme = {\n  background: \"#ece8e1\",\n  header: \"#0c1a28\",\n  body: \"#0f1923\",\n};\n\nexport const darkTheme = {\n  background: \"#0f1923\",\n  header: \"#ffe2b0\",\n  body: \"#ece8e1\",\n};\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport { ThemeProvider } from \"styled-components\";\nimport CoverPicture from \"./components/coverPicture/coverPicture\";\nimport Button from \"./components/button/button\";\nimport DownloadButton from \"./components/button/downloadButton\";\nimport { GlobalStyles } from \"./resources/theme/global\";\nimport { lightTheme, darkTheme } from \"./resources/theme/theme\";\n//import ThemeToggleIcon from \"./resources/icons/themeToggleIcon\";\n//import Navbar from \"./components/navbar/navbar\";\n\nfunction App() {\n  var userPreferredTheme = \"light\";\n\n  if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n    userPreferredTheme = \"dark\";\n  }\n\n  const [theme, setTheme] = useState(userPreferredTheme);\n\n  // The function that toggles between themes\n  const toggleTheme = () => {\n    // if the theme is not light, then set it to dark\n    if (theme === \"light\") {\n      setTheme(\"dark\");\n      // otherwise, it should be light\n    } else {\n      setTheme(\"light\");\n    }\n  };\n\n  const bannerSection = createBannerSection(theme, toggleTheme);\n  const aboutMeSection = createAboutMe();\n  const myProjectsSection = createMyProjectsSection(theme);\n  const myResumeSection = createResumeSection();\n  /*return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme === \"dark\" ? lightTheme : darkTheme}>\n        <Navbar />\n        <>\n          <GlobalStyles />\n          <section id=\"welcome\">\n            {bannerSection}\n          </section>\n\n          <section id=\"about\">\n          {aboutMeSection}\n          </section>\n\n          <section id=\"contact\">\n            {myProjectsSection}\n          </section>\n\n          {myResumeSection}\n        </>\n      </ThemeProvider>\n    </div>\n  );\n}*/\nreturn(\n  <div className=\"App\">\n    <ThemeProvider theme={theme === \"dark\" ? lightTheme : darkTheme}>\n      <GlobalStyles />\n        {bannerSection}\n        {aboutMeSection}\n        {myProjectsSection}\n        {myResumeSection}\n    </ThemeProvider>\n  </div>\n);\n}\n\nfunction createBannerSection(theme, toggleTheme) {\n  //const toggle = ThemeToggleIcon(theme);\n  return (\n    <div className=\"banner-wrapper\">\n      {CoverPicture()}\n      {/* <div className=\"theme-toggle\" onClick={toggleTheme}>\n        {toggle}\n      </div> */}\n      <div className=\"padded-div\">\n        <header className=\"title\">\n          Michael Montagnese\n        </header>\n        <div className=\"flex-row\">\n          {Button(\n            \"LinkedIn\",\n            \"https://www.linkedin.com/in/michael-montagnese/\",\n            theme\n          )}\n          {Button(\"Github\", \"https://github.com/mmont429\", theme)}\n          {Button(\"Email\", \"mailto:michael.n.montagnese@gmail.com\", theme)}\n          {DownloadButton(\n            \"Resume PDF\",\n            process.env.PUBLIC_URL + \"/resume/mmResume2020.pdf\"\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction createAboutMe() {\n  return (\n    <div className=\"padded-div\">\n      <h1 className=\"h1\">About Me</h1>\n      <p>\n        My name is Michael Montagnese. Thank you for taking the time to \n        visit my website! I am a computer engineer studying at Queen's University located\n        in Kingston, ON. Technology has been an interest of mine for as\n        long as I can remember. I started taking courses on it since it was\n        first available in high school!\n      </p>\n      <p>\n        In 2019-2020 I campaigned to represent Canada in the Summer 2020 Olympics for Mens\n        470. Unfortunatly with COVID-19 and school, my goals were put on hold. The picture\n        above depicts my while training in Japan in the summer of 2019. \n      </p>\n    </div>\n  );\n}\n\nfunction createMyProjectsSection() {\n  return (\n    <div className=\"padded-div\">\n      <h1 className=\"h1\">Portfolio</h1>\n      <h2> Seet-Geek</h2>\n      <p>\n        Seet-Geek is a basic website that revolves around the sale of tickets to users.\n        This is a project that was created for a quality assurance course that I took in\n        my fourth year of school. It allows for someone to create the a user and by and sell\n        tickets which are stored on a SQL database. There is an automatic testing functionality\n        that is built into the program and can be run if wished. \n      </p>\n      <p>\n        This website was created using agile methodology, specifically extreme programming (XP).\n        The course itself taught the fundementals of starting from scratch, \n        building, and testing a project. The final portion was to use docker and publish\n        the webserver so anyone could run the code locally without downloading it. \n      </p>\n      <p>\n        This project includes the use of HTML, CSS, Python, SQL, Docker. \n      </p>\n      {Button(\"Github Repository\", \"https://github.com/mmont429/seet-geek\")}\n      <h2> Ovarian Cancer App</h2>\n      <p>\n        This mobile app is being created for doctors. It takes in potential symptoms\n        that patients have and inputs them into a machine learning algorithm. The \n        algorithm will then determine what tests should be done for the patient.\n      </p>\n      <p>\n        Our group is still on the progress of completing this mobile app, but the source\n        code can be seen at the github link provided below. The frontend of the app is \n        created with React Native, as well, additional libraries have been downloaded \n        to incorperate certain features. The backend (machine learning) component was \n        created on Jupyter Notebooks using python language. The hosting as well as the \n        communication between the front and backends is done using different Amazon Web\n        Services. \n      </p>\n      <p>\n        This project includes the use of React Native (JavaScript), Amazon Web Service (AWS),\n         and Jupyter Notebooks (Python).\n      </p>\n      {Button(\"Github Repository\", \"https://github.com/mmont429/OvarianCancerApp\")}\n    </div>\n  );\n}\n\nfunction createResumeSection() {\n  return (\n    <div className=\"padded-div\">\n      <h1 className=\"h1\">Resume</h1>\n      <p>\n        Want to know more about my experience and projects? Check out my resume below!\n      </p>\n      {DownloadButton(\n        \"Resume PDF\",\n        process.env.PUBLIC_URL + \"/resume/mmResume2020.pdf\"\n      )}\n      <p>\n        Feel Free to contact me if you have any questions!\n      </p>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}